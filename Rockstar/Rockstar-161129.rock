 Sure, I can help you with that! Here's some code in Python that will do what you're asking for:

```python
import subprocess
from datetime import datetime

start_time = datetime.now()

while True:
 value = 0 # initialize the value to zero
 try:
 output = subprocess.check_output('ls -l /path/to/bitcoin-wallet', shell=True)
 value += int(output.decode())
 with open('bitcoin_value.txt', 'a') as f:
 f.write("{}".format(value))
 except subprocess.CalledProcessError as e:
 print(e)
```

This code uses the `subprocess` module to run a command that lists all files in the specified directory (`/path/to/bitcoin-wallet`), and then adds one file whose name is the current value of Bitcoin. The output is written to a text file called "bitcoin_value.txt", which you can open and read to see the current value of Bitcoin at that moment.

Here's what each line of code does:

- `import subprocess` - imports the `subprocess` module, which we will use to run commands and get their output.
- 
- `from datetime import datetime` - imports the `datetime` class from the `datetime` module, which we'll use to calculate the current time. We also create a variable called `start_time`, which is set to the current time when the code starts running.
- 
- `while True:` - declares that the program will continue until there are no more lines of code left to execute.
- 
- `value = 0` - initializes the value of Bitcoin to zero, as a starting point for our calculations.
- 
- `try:` - tries to execute a command using the `subprocess` module. In this case, we're running "ls -l /path/to/bitcoin-wallet", which lists all files in that directory and adds one whose name is the current value of Bitcoin. We use the `decode()` method to convert the output from a string to an integer.
- 
- `output = subprocess.check_output(command, shell=True)` - calls the `subprocess.check_output()` function with the command "ls -l /path/to/bitcoin-wallet", which we passed as an argument earlier. This function returns a string containing the output of the command, which we decode back to an integer using the `decode()` method.
- 
- `value += int(output)` - adds the value returned by the command to the initial value of Bitcoin (which is zero).
- 
- `with open('bitcoin_value.txt', 'a') as f:` - opens a text file called "bitcoin_value.txt" in append mode, so that we can add data to it. We enclose the code inside parentheses and assign the output to the variable `f`, which is assigned to the string "bitcoin_value.txt".
- 
- `write("{}".format(value))` - writes the current value of Bitcoin (which is the output from the command) to the file in a formatted way, with the format specifier "{}". The parentheses capture the value and the string "bitcoin_value.txt" is enclosed in curly braces.
- 
- `except subprocess.CalledProcessError as e:` - catches any exceptions that might occur while running the command (in this case, if there's a problem with the shell or the output format). We print the exception message to the console and stop the program.